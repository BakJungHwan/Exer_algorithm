void movement(int*, int*, char*);
double sum_value(int*, int*, int*);


int main(int argc, char* argv[]) {
	/* 아래 freopen 함수는 input.txt를 read only 형식으로 열고, 표준입력(키보드) 대신 input.txt 로 부터 읽어오겠다는 의미의 코드입니다.
	만약 본인 PC 에서 테스트 할 때는, 입력값을 input.txt에 저장한 후 freopen 함수를 사용하면
	그 아래에서 scanf 함수를 사용하여 표준입력 대신 input.txt 파일로 부터 입력값을 읽어 올 수 있습니다.
	또한, 본인 PC에서 freopen 함수를 사용하지 않고 표준입력을 사용하여 테스트하셔도 무방합니다.
	단, Codeground 시스템에서 "제출하기" 할 때에는 반드시 freopen 함수를 지우거나 주석(//) 처리 하셔야만 합니다. */
	freopen("sample_input.txt", "r", stdin);

	setbuf(stdout, NULL);

	int TC;
	int test_case;

	scanf("%d", &TC);
	for (test_case = 1; test_case <= TC; test_case++) {
		int x = 1;
		int y = 1;
		double result = 1;
		int n;
		int move_count=0;
		char *move;

		scanf(" %d%d", &n, &move_count);
		move = (char*)malloc(sizeof(char)*move_count);
		if (move == NULL)
		{
			printf("Dynamic memory allocation is denied");
			return 1;
		}
		else
		{
			for (int i = 0; i < move_count; i++)
			{
				scanf(" %c", move + i);
				movement(&x, &y, move + i);
				result += sum_value(&x, &y, &n);
			}
		}


		




		// 이 부분에서 정답을 출력하십시오.
		printf("Case #%d\n", test_case);
		printf("%u\n", (unsigned int)result);

	}

	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}

void movement(int *x, int *y, char *c)
{
	if (*c == 'D') (*x)++;
	else if (*c == 'U') (*x)--;
	else if (*c == 'L') (*y)--;
	else (*y)++;
	printf("location - x: %d, y: %d\n", *x, *y);
}

double sum_value(int *x, int*y, int* n)
{
	int k = 0;
	int t = 0;
	t = (*x) + (*y) - 1;
	if ((*n) == 1) return 1;
	else if ((*n) == 2)
	{
		if (t == 1) return 1;
		else if (t == 3) return 4;
		else
		{
			if ((*x) == 2) return 2;
			else return 3;
		}
	}
	else
	{


		if (t < *n)
		{
			if (t & 0x00000001 == 1)
			{
				k = t - (*x) + 1;
			}
			else
			{
				k = t - (*y) + 1;
			}
		}
		else if (t == *n || t == (*n) + 1) {
			if (t & 0x00000001 == 1)
			{
				k = (*n) - (*x) + 1;
			}
			else
			{
				k = (*n) - (*y) + 1;
			}
		}
		else
		{
			if (t & 0x00000001 == 1)
			{
				k = (*n) - (*x) + 1;
			}
			else
			{
				k = (*n) - (*y) + 1;
			}

			printf("value : %d\n", (((*n)*(*n) + (*n) + 2) / 2 + ((t - 3 * (*n))*((*n) - t + 1)) / 2) + k - 1);
			return (((*n)*(*n) + (*n) + 2) / 2 + ((t - 3 * (*n))*((*n) - t + 1)) / 2 + k - 1);
		}


		printf("value : %d\n", (t*t - t + 2) / 2 + k - 1);
		return (t*t - t + 2) / 2 + k - 1;
	}
}