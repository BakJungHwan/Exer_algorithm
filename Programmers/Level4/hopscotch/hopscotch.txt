Question. 땅따먹기 게임 -> https://programmers.co.kr/learn/challenge_codes/35/solutions


Python
1.
def hopscotch(board, size):
    result = 0
    # 땅따먹기 게임으로 얻을 수 있는 최대 점수는?
    for i in range(1,size):
        for j in range(4):
            temp = copy.deepcopy(board[i-1])
            temp[j] = 0
            board[i][j]+=max(temp)
    result = max(board[-1])
    return result

dfs가 떠오르는 문제인데, 첫번째 인상적인 답이 동적계획법에 가까웠다.
매번 deepcopy를 하는 것외에는 맘에 들었다.


2.
def hopscotch(board, size):
    accum = [0] * len(board[0])

    for row in board:
        tmp = accum[:]
        for i in range(len(row)):
            accum[i] = row[i] + max(tmp[:i] + tmp[i+1:])

    return max(accum)

동적계획법 형태로 설계. 누적값 중에 현재 선택하지 않은 자리에 있는 녀석들의 최대값을 뽑아서 계산
도전해볼만한 방법

3.
def hopscotch(board, size):
    a,b,c,d = 0,0,0,0

    def get(v,x,y,z):
        return v+max(x,y,z);

    for _a,_b,_c,_d in board:
        a,b,c,d = get(_a,b,c,d), get(_b,a,c,d), get(_c,a,b,d), get(_d,a,b,c)

    return max(a,b,c,d)

이 녀석도 새로운 접근이다. 누적값의 최대값의 위치를 뽑아내는 것.
지금까지는 가장 맘에 든다.