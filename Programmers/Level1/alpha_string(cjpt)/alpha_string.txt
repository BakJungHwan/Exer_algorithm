Question. 문자열 다루기 기본 -> https://programmers.co.kr/learn/challenge_codes/100
alpha_string46함수는 문자열 s를 매개변수로 입력받습니다.
s의 길이가 4혹은 6이고, 숫자로만 구성되있는지 확인해주는 함수를 완성하세요.
예를들어 s가 a234이면 False를 리턴하고 1234라면 True를 리턴하면 됩니다


Python

str.isnumeric(), isalnum()....
이녀석들 모두 str의 메서드다!!


1.
def alpha_string46(s):
    return len(s) in [4,6] and s.isnumeric()

생각해보니, isnumeric을 쓰면 굳이 스트링 순회를 고려하지 않아도 상관없었다.


Java
java에서 index로 string의 요소에 접근하려면 String.charAt() 메서드를 사용해야 한다.



C++
Java와 C++은 객체 생성 문법이 다르다. 아래와 같은 어마어마한 차이가 있다.
Java
    Alpha_string as = new Alpha_string();


C++
    Alpha_string as();
    or
    Alpha_string* as = new Alpha_string();


생성자도 모두 작동하는 것을 보면,

이 두 녀석의 차이는 스택과 힙을 사용하는 차이로 보인다.


이것만으로 둘을 구분하기에는 '포인터'의 정의에 대한 엄청난 논쟁이 있다.

https://kldp.org/node/70013

아무래도 나는 C/C++에서 사용하는 '포인터'의 개념을 확장해서 애매하게 사용하는 유저인듯

정리하자면,

위키피디아 정의에 따라서 포인터는 '명시적으로 메모리주소를 다룰 수 있는 '인터페이스'가 있는 자료형'에만 적용되는 말이며

레퍼런스는 데이터 그 자신이 아닌 다른 데이터를 참조하는 객체를 의미한다고 한다.

개인적인 생각에는 위 정의가 나름 깔끔하다는 생각이지만, 

영어를 해석한 것이라, 해석의 문제로 의견이 분분할 것으로 보인다.




this를 사용하는데도 차이가 있는데
C++에서 this는 -> 포인터형태로 지칭하는 반면

Java와 Python은 .로 해서 멤버변수 형태로 사용한다.


내가 생각하기 편한 C++의 레퍼런스와 포인터의 차이라고 얘기할 수는 있겠으나

기본적으로 '다른'언어이기 때문에 '해석'을 시도하면 안되는 것이라 생각한다.

3가지 언어를 조금씩 공부하고 있는 중이기 때문에 구별하기 위한 나만의 기준 같은 느낌을 갖고

고수님들을 만나면 하나씩 깨지지 않을까 싶다.




JS
1.
function alpha_string46(s){
  var regex = /^\d{6}$|^\d{4}$/;
  return regex.test(s);
}

정규식을 활용한 풀이